{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api/user/\";\nclass AuthService {\n  login(email, password) {\n    return axios.post(API_URL + \"/login\", {\n      email,\n      password\n    });\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n  register(username, email, password, role) {\n    return axios.post(API_URL + \"/register\", {\n      username,\n      email,\n      password,\n      role\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n  updateProfile(updateData) {\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n    return axios.patch(API_URL + \"profile\", updateData, {\n      headers: {\n        Authorization: token\n      }\n    }).then(response => {\n      if (response.data.token) {\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n        user.token = response.data.token;\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      }\n      return response;\n    });\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","email","password","post","logout","localStorage","removeItem","register","username","role","getCurrentUser","JSON","parse","getItem","updateProfile","updateData","token","patch","headers","Authorization","then","response","data","user","setItem","stringify"],"sources":["/Users/linkunhan/Desktop/my-project/frontend/src/services/auth-service.js"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api/user/\";\n\nclass AuthService {\n  login(email, password) {\n    return axios.post(API_URL + \"/login\", { email, password });\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n  register(username, email, password, role) {\n    return axios.post(API_URL + \"/register\", {\n      username,\n      email,\n      password,\n      role,\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n  updateProfile(updateData) {\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n\n    return axios\n      .patch(API_URL + \"profile\", updateData, {\n        headers: {\n          Authorization: token,\n        },\n      })\n      .then((response) => {\n        if (response.data.token) {\n          const user = JSON.parse(localStorage.getItem(\"user\"));\n          user.token = response.data.token;\n          localStorage.setItem(\"user\", JSON.stringify(user));\n        }\n        return response;\n      });\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrB,OAAOL,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;MAAEG,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC5D;EACAE,MAAMA,CAAA,EAAG;IACPC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;EACjC;EACAC,QAAQA,CAACC,QAAQ,EAAEP,KAAK,EAAEC,QAAQ,EAAEO,IAAI,EAAE;IACxC,OAAOZ,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,WAAW,EAAE;MACvCU,QAAQ;MACRP,KAAK;MACLC,QAAQ;MACRO;IACF,CAAC,CAAC;EACJ;EACAC,cAAcA,CAAA,EAAG;IACf,OAAOC,IAAI,CAACC,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EACAC,aAAaA,CAACC,UAAU,EAAE;IACxB,IAAIC,KAAK;IACT,IAAIX,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,EAAE;MAChCG,KAAK,GAAGL,IAAI,CAACC,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC,CAACG,KAAK;IACxD,CAAC,MAAM;MACLA,KAAK,GAAG,EAAE;IACZ;IAEA,OAAOnB,KAAK,CACToB,KAAK,CAACnB,OAAO,GAAG,SAAS,EAAEiB,UAAU,EAAE;MACtCG,OAAO,EAAE;QACPC,aAAa,EAAEH;MACjB;IACF,CAAC,CAAC,CACDI,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,IAAI,CAACN,KAAK,EAAE;QACvB,MAAMO,IAAI,GAAGZ,IAAI,CAACC,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC;QACrDU,IAAI,CAACP,KAAK,GAAGK,QAAQ,CAACC,IAAI,CAACN,KAAK;QAChCX,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACc,SAAS,CAACF,IAAI,CAAC,CAAC;MACpD;MACA,OAAOF,QAAQ;IACjB,CAAC,CAAC;EACN;AACF;AAEA,eAAe,IAAItB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}